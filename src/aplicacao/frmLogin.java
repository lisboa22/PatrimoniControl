/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package aplicacao;

//import aplicacao.Seguranca;
import dao.DAOFactory;
import dao.PermissaoDAO;
import dao.UsuarioDAO;
import dao.PermissaomoduloDAO;
import java.awt.event.KeyEvent;
import java.util.List;
import javax.swing.JOptionPane;
//import javax.swing.SwingUtilities;
import javax.swing.text.AbstractDocument;
import modelo.Permissao;
import modelo.Permissaomodulo;
import modelo.Usuario;

/**
 *
 * @author robson
 */
public class frmLogin extends frmGenerico {
    //private final String PATH_ICON="/recurso/estoque-pronto.png";
    private int idUsuario;
    //private boolean novaSenha = false;
    private String usuario;
    private int alterSenha;
    private boolean usuarioEncontrado = false;
    private String senhaHashArmazenada;
    private boolean alterTela = false;
    private int permissao;
    private int idUsuariosecao;
    
    UsuarioDAO usuarioDAO = DAOFactory.criarUsuarioDAO();
    //PermissaoDAO permissaoDAO = DAOFactory.criarPermissaoDAO();
    
    //public int getId() {return idUsuariosecao;}
    //public int getPermissao() {return permissao;}
    /**
     * Creates new form frmLogin
     */
    public frmLogin() {
        initComponents();
        initEstiloGlobal();
        //ImageIcon imageicon = new ImageIcon(getClass().getResource(PATH_ICON));
        //this.setIconImage(imageicon.getImage());
         // Aplica o filtro de maiúsculas ao JTextField      
        ((AbstractDocument) txtUsuario.getDocument()).setDocumentFilter(new UppercaseDocumentFilter());
        
        // Deixa o label e o campo invisíveis no início
        lblRepsenha.setVisible(false);
        txtRepsenha.setVisible(false);
        
        // Pegue a lista de permissões
        List<Usuario> usuarios = usuarioDAO.listar(); 
        
        if (usuarios.isEmpty()){
            System.out.println("Sim");
        } else {
            //System.out.println("Não");
        } 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lblUsuario = new javax.swing.JLabel();
        txtUsuario = new javax.swing.JTextField();
        lblSenha = new javax.swing.JLabel();
        txtSenha = new javax.swing.JPasswordField();
        lblRepsenha = new javax.swing.JLabel();
        txtRepsenha = new javax.swing.JPasswordField();
        lblTitulo = new javax.swing.JLabel();
        btnEntrar = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Patrim - Login");
        setResizable(false);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblUsuario.setText("Usuário");

        txtUsuario.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        txtUsuario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUsuarioKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtUsuarioKeyReleased(evt);
            }
        });

        lblSenha.setText("Senha");

        txtSenha.setEnabled(false);
        txtSenha.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSenhaKeyPressed(evt);
            }
        });

        lblRepsenha.setText("Repita a senha");

        txtRepsenha.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtRepsenhaKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblSenha, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtUsuario)
                    .addComponent(txtSenha, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(lblRepsenha)
                    .addComponent(txtRepsenha))
                .addContainerGap(160, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblUsuario)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSenha)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblRepsenha)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtRepsenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        lblTitulo.setFont(new java.awt.Font("Segoe UI", 0, 30)); // NOI18N
        lblTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitulo.setText("Login");

        btnEntrar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnEntrar.setText("Entrar");
        btnEntrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEntrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnEntrar, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(125, 125, 125))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
            .addComponent(lblTitulo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(lblTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEntrar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnEntrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEntrarActionPerformed
        logar();
    }//GEN-LAST:event_btnEntrarActionPerformed
            
    private void txtUsuarioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUsuarioKeyReleased
        String texto = txtUsuario.getText();
        if (texto.trim().isEmpty()) {
            txtSenha.setEnabled(false);
        } else {
            txtSenha.setEnabled(true);
        }
    }//GEN-LAST:event_txtUsuarioKeyReleased

    private void txtUsuarioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUsuarioKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            //Verifica se há campo vazio.
            if (txtUsuario.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Informe o usuário.");
                txtUsuario.requestFocus();
            } else {
                txtSenha.requestFocus();
            }
        } 
    }//GEN-LAST:event_txtUsuarioKeyPressed

    private void txtRepsenhaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRepsenhaKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            if (alterTela){
                logar();
            } 
        }
    }//GEN-LAST:event_txtRepsenhaKeyPressed

    private void txtSenhaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSenhaKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            if (!alterTela){
                logar();
            } else {
                txtRepsenha.requestFocus();
            }
        }
    }//GEN-LAST:event_txtSenhaKeyPressed

private void logar(){
    
    // Validações iniciais - campos obrigatórios
    if (txtUsuario.getText().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Digite o usuário.");
        txtUsuario.requestFocus();
        return;
    }
    
    if (txtSenha.getText().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Digite a senha.");
        txtSenha.requestFocus();
        return;
    }
    
    // Se estiver na tela de alteração de senha, validar confirmação
    if (alterTela && txtRepsenha.getText().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Repita a senha.");
        txtRepsenha.requestFocus();
        return;
    }
    
    // Verificar se o usuário foi alterado após já ter sido encontrado
    if (usuarioEncontrado && !txtUsuario.getText().equalsIgnoreCase(usuario)) {
        JOptionPane.showMessageDialog(this, "Usuario foi alterado. Digite o Usuário novamente.");
        txtUsuario.setText("");
        txtUsuario.requestFocus();
        // Reset das variáveis de controle
        usuarioEncontrado = false;
        alterTela = false;
        return;
    }
    
    // Se ainda não encontrou o usuário, buscar na lista
    if (!usuarioEncontrado) {
        List<Usuario> usuarios = usuarioDAO.listar();
        
        for (Usuario u : usuarios) {
            if (u.getUsuario().equalsIgnoreCase(txtUsuario.getText())) {
                idUsuario = u.getId();
                usuario = u.getUsuario();
                senhaHashArmazenada = u.getSenha();
                alterSenha = u.getAltersenha();
                usuarioEncontrado = true;
                idUsuariosecao = u.getId();
                
                // Buscar permissões do usuário
                Usuario usuarioCompleto = usuarioDAO.listar(idUsuario); 
                permissao = usuarioCompleto.getPermissao().getId();  
                break;
            }
        }
        
        // Se não encontrou o usuário
        if (!usuarioEncontrado) {
            JOptionPane.showMessageDialog(null, "Usuário não encontrado!");
            txtUsuario.setText("");
            txtSenha.setText("");
            txtUsuario.requestFocus();
            return;
        }
    }
    
    // Usuário foi encontrado, processar login ou alteração de senha
    if (usuarioEncontrado) {
        
        // Caso 1: Primeira vez logando com senha que precisa ser alterada
        if (alterSenha == 1 && !alterTela) {
            String senhaDigitada = txtSenha.getText();
            if (!Seguranca.verificarSenha(senhaDigitada, senhaHashArmazenada)) {
                JOptionPane.showMessageDialog(null, "Senha incorreta!");
                txtSenha.setText("");
                txtSenha.requestFocus();
                return; 
            }
            
            // Senha correta, mas precisa alterar
            String regrasSenha = "Bem vindo! Senha provisória utilizada: Cadastre a nova senha!\n\n" +
                               "🔒 REGRAS PARA A NOVA SENHA:\n" +
                               "• Mínimo de 6 caracteres\n" +
                               "• Pelo menos 1 letra maiúscula (A-Z)\n" +
                               "• Pelo menos 1 letra minúscula (a-z)\n" +
                               "• Pelo menos 1 número (0-9)\n" +
                               "• Pelo menos 1 caractere especial (!@#$%^&* etc.)\n" +
                               "• Diferente da senha provisória atual";
                               
            JOptionPane.showMessageDialog(this, regrasSenha, "Nova Senha Obrigatória", JOptionPane.INFORMATION_MESSAGE);
            lblRepsenha.setVisible(true);
            txtRepsenha.setVisible(true);
            lblTitulo.setText("Cadastrar Nova Senha");
            btnEntrar.setText("Salvar");
            txtSenha.setText("");
            txtSenha.requestFocus();
            alterTela = true;
            return;
        }
        
        // Caso 2: Está na tela de alteração de senha
        else if (alterSenha == 1 && alterTela) {
            String novaSenha = txtSenha.getText();
            String confirmacaoSenha = txtRepsenha.getText();
            
            // 🔧 NOVA VALIDAÇÃO: Verificar se não está reutilizando a senha provisória
            if (Seguranca.verificarSenha(novaSenha, senhaHashArmazenada)) {
                JOptionPane.showMessageDialog(this, 
                    "Você não pode reutilizar a senha provisória!\n" +
                    "Por favor, digite uma senha diferente.", 
                    "Senha Inválida", 
                    JOptionPane.WARNING_MESSAGE);
                txtSenha.setText("");
                txtRepsenha.setText("");
                txtSenha.requestFocus();
                return;
            }
            
            // Verificar se as senhas coincidem
            if (!novaSenha.equals(confirmacaoSenha)) {
                JOptionPane.showMessageDialog(this, "As Senhas digitadas são diferentes!");
                txtRepsenha.setText("");
                txtRepsenha.requestFocus();
                return;
            }
            
            // 🔧 VALIDAÇÃO ADICIONAL: Critérios mínimos de senha (opcional)
            if (novaSenha.length() < 6) {
                JOptionPane.showMessageDialog(this, 
                    "A nova senha deve ter pelo menos 6 caracteres!", 
                    "Senha Inválida", 
                    JOptionPane.WARNING_MESSAGE);
                txtSenha.setText("");
                txtRepsenha.setText("");
                txtSenha.requestFocus();
                return;
            }
            
            if (!novaSenha.matches(".*[A-Z].*")) {
                JOptionPane.showMessageDialog(this, 
                    "A nova senha deve ter pelo menos 1 letra maiúscula!", 
                    "Senha Inválida", 
                    JOptionPane.WARNING_MESSAGE);
                txtSenha.setText("");
                txtRepsenha.setText("");
                txtSenha.requestFocus();
                return;
            }
            
            if (!novaSenha.matches(".*[a-z].*")) {
                JOptionPane.showMessageDialog(this, 
                    "A nova senha deve ter pelo menos 1 letra minúscula!", 
                    "Senha Inválida", 
                    JOptionPane.WARNING_MESSAGE);
                txtSenha.setText("");
                txtRepsenha.setText("");
                txtSenha.requestFocus();
                return;
            }
            
            if (!novaSenha.matches(".*[0-9].*")) {
                JOptionPane.showMessageDialog(this, 
                    "A nova senha deve ter pelo menos 1 número!", 
                    "Senha Inválida", 
                    JOptionPane.WARNING_MESSAGE);
                txtSenha.setText("");
                txtRepsenha.setText("");
                txtSenha.requestFocus();
                return;
            }

            if (!novaSenha.matches(".*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?].*")) {
                JOptionPane.showMessageDialog(this, 
                    "A nova senha deve ter pelo menos 1 caracter especial!", 
                    "Senha Inválida", 
                    JOptionPane.WARNING_MESSAGE);
                txtSenha.setText("");
                txtRepsenha.setText("");
                txtSenha.requestFocus();
                return;
            }

            
            try {
                // Salvar nova senha
                Usuario usuarioUpdate = new Usuario();
                usuarioUpdate.setId(idUsuario);
                usuarioUpdate.setSenha(Seguranca.hashSenha(novaSenha));
                usuarioUpdate.setAltersenha(0);

                UsuarioDAO dao = DAOFactory.criarUsuarioDAO();
                int resultado = dao.editarSenha(usuarioUpdate);

                if (resultado > 0) {
                    JOptionPane.showMessageDialog(null, 
                        "Senha alterada com sucesso!\n" +
                        "Faça login com sua nova senha.", 
                        "Sucesso", 
                        JOptionPane.INFORMATION_MESSAGE);
                    
                    // 🔧 CORREÇÃO DO BUG: Recarregar dados do banco
                    Usuario usuarioAtualizado = usuarioDAO.listar(idUsuario);
                    senhaHashArmazenada = usuarioAtualizado.getSenha();
                    alterSenha = usuarioAtualizado.getAltersenha();
                    
                    // Resetar interface
                    lblRepsenha.setVisible(false);
                    txtRepsenha.setVisible(false);
                    lblTitulo.setText("Login");
                    btnEntrar.setText("Entrar");
                    txtSenha.setText("");
                    txtRepsenha.setText("");
                    
                    // Atualizar controles
                    alterTela = false;
                    
                    txtSenha.requestFocus();
                    return;
                } else {
                    JOptionPane.showMessageDialog(null, "Falha ao cadastrar a senha!");
                    return;
                }

            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Erro ao atualizar: " + ex.getMessage());
                return;
            }
        }
        
        // Caso 3: Login normal (senha não precisa ser alterada)
        else if (alterSenha == 0 && !alterTela) {
            String senhaDigitada = txtSenha.getText();
            if (!Seguranca.verificarSenha(senhaDigitada, senhaHashArmazenada)) {
                JOptionPane.showMessageDialog(null, "Senha incorreta!");
                txtSenha.setText("");
                txtSenha.requestFocus();
                return; 
            }
            
            // Login bem-sucedido
            frmPrincipal principal = new frmPrincipal(idUsuariosecao, permissao);
            principal.setVisible(true);
            dispose();
        }
    }
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmLogin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEntrar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblRepsenha;
    private javax.swing.JLabel lblSenha;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JLabel lblUsuario;
    private javax.swing.JPasswordField txtRepsenha;
    private javax.swing.JPasswordField txtSenha;
    private javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables
}
